<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>XWiki</web>
<name>TodoMacroGroovy</name>
<language></language>
<defaultLanguage>fr</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>xwiki:XWiki.LudovicDubost</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.LudovicDubost</contentAuthor>
<creationDate>1254551506000</creationDate>
<date>1255894997000</date>
<contentUpdateDate>1255894997000</contentUpdateDate>
<version>25.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>XWiki.TodoMacroGroovy</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>945f1ee0-e383-440d-95c5-f03043bc0d5d</guid>
<property>
<tags/>
</property>
</object>
<content>/*
#*
TodoMacroGroovy

*#
*/

import org.xwiki.rendering.block.*;
import org.xwiki.rendering.renderer.*;
import org.xwiki.rendering.syntax.*;
import org.xwiki.rendering.parser.*;
import org.xwiki.rendering.renderer.printer.DefaultWikiPrinter;
import org.xwiki.rendering.renderer.printer.WikiPrinter;
import com.xpn.xwiki.web.Utils;
import com.xpn.xwiki.api.*;
import java.util.*;
import java.lang.reflect.*;


public class TodoMacroGroovy {
   def xwiki;
   def context;

   public setContext(context, xwiki) {
      this.xwiki = xwiki;
      this.context = context;
   }

   public int updateDocumentXDOM(xdom, hashcode, newstatus, newpriority, newcontent) {
      def xdomchanged = false;
      // Finding Macro Block
      List&lt;MacroBlock&gt; macroBlocks = xdom.getChildrenByType(MacroBlock.class, true);
      for (MacroBlock macroBlock : macroBlocks) {
        def id = macroBlock.getId();
        if (id.equals("todo")) {
     
        def currentStatus = macroBlock.getParameter("status");   
        def currentPriority = macroBlock.getParameter("priority");   
        def currentAssignee = macroBlock.getParameter("assignee");   
        def currentContent = macroBlock.getContent();   
        currentStatus = (currentStatus==null) ? "" : currentStatus;
        currentPriority = (currentPriority==null) ? "" : currentPriority;
        currentAssignee = (currentAssignee==null) ? "" : currentAssignee;
        currentContent = (currentContent==null) ? "" : currentContent;

        def str = "${currentStatus}-${currentPriority}-${currentAssignee}-${currentContent}";
        def currentHashcode = str.trim().hashCode();

        System.out.println("str: " + str);       
        System.out.println("hashcode: " + hashcode);       
        System.out.println("current hashcode: " + currentHashcode);       

        if ("$hashcode"=="$currentHashcode") {
           System.out.println("found macro");
           boolean done = true;

           if (currentStatus!=newstatus) {
             // System.out.println("status different changing it");
             currentStatus = newstatus;
             macroBlock.setParameter("status", newstatus);
             done = true;
           }  
           if (currentPriority!=newpriority) {
             // System.out.println("priority different changing it");
             currentPriority = newpriority;
             macroBlock.setParameter("priority", newpriority);
             done = true;
           }       
           if (currentContent!=newcontent) {
             // System.out.println("priority different changing it");
             currentContent = newcontent;

             // We need to use reflection until this exists: macroBlock.setContent(newcontent);
             Field field = macroBlock.getClass().getDeclaredField("content");
             field.setAccessible(true);
             field.set(macroBlock, newcontent);

             done = true;
           }       

           if (done==true) {
             def newstr = "${currentStatus}-${currentPriority}-${currentAssignee}-${currentContent}";
             def hc = newstr.trim().hashCode();
             return hc;         
           } 
         }
        }
      }
      return 0;
   }

   public String getContentFromXDOM(xdom) {
     WikiPrinter printer = new DefaultWikiPrinter();
     BlockRenderer renderer = (BlockRenderer) Utils.getComponent(BlockRenderer.class, Syntax.XWIKI_2_0.toIdString());
     renderer.render(xdom, printer);
     return printer.toString();
   }

   public XDOM getXDOMFromContent(content) {
     Parser parser = (Parser) Utils.getComponent(Parser.class, Syntax.XWIKI_2_0.toIdString());
     return parser.parse(new StringReader(content));
   }
 
   public int updateDocument(doc, hashcode, newstatus, newpriority, newcontent) {
      XDOM xdom = (doc == null) ? null : doc.getDocument().getXDOM();
      xdom = (xdom == null) ? null : xdom.clone();
       
      def result = updateDocumentXDOM(xdom, hashcode, newstatus, newpriority, newcontent);

      // we updated the xdom, apply it
      if (result!=0) {
         doc.setContent(getContentFromXDOM(xdom));
         return result;
      }

      // adding todos stored in objects
      for (objs in doc.getxWikiObjects().values()) {
        for (obj in objs) {
          doc.use(obj);
          for (propname in obj.getxWikiClass().getPropertyNames()) {
             def content = doc.getValue(propname).toString();
             if (content!=null) {
              xdom = getXDOMFromContent(content); 
              result = updateDocumentXDOM(xdom, hashcode, newstatus, newpriority, newcontent);      
              if (result!=0) {
                doc.set(propname, getContentFromXDOM(xdom));
                return result;
              }
             }
          }
        }
      }

      return 0;
   }

  public List getTodos(Document doc) {
      def todoList = new ArrayList();
      XDOM xdom = (doc == null) ? null : doc.getDocument().getXDOM();
      xdom = (xdom == null) ? null : xdom.clone();
      todoList.addAll(getTodosFromXDOM(xdom));

      // adding todos stored in objects
      for (objs in doc.getxWikiObjects().values()) {
        for (obj in objs) {
          doc.use(obj);
          for (propname in obj.getxWikiClass().getPropertyNames()) {
             def content = doc.getValue(propname).toString();
             if (content!=null)
              todoList.addAll(getTodosFromXDOM(getXDOMFromContent(content)));
          }
        }
      }

      return todoList;
  }

  public List getTodosFromXDOM(xdom) {
      def todoList = new ArrayList();
       
      // Finding Macro Block
      List&lt;MacroBlock&gt; macroBlocks = xdom.getChildrenByType(MacroBlock.class, true);
      for (MacroBlock macroBlock : macroBlocks) {
        def id = macroBlock.getId();
        if (id.equals("todo")) {
            def todo = [:];
            todo.assignee = macroBlock.getParameter("assignee"); 
            todo.status = macroBlock.getParameter("status"); 
            todo.priority = macroBlock.getParameter("priority"); 
            todo.content = macroBlock.getContent(); 

            // adding hashcode
            def str = "${todo.status}-${todo.priority}-${todo.assignee}-${todo.content}";
            def hashcode = str.trim().hashCode();
            todo.divid = (hashcode&gt;0) ? hashcode : -hashcode;

            todoList.add(todo);
        }
      }  
      return todoList;
   }

}</content>
</xwikidoc>
